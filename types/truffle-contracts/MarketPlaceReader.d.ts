/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MarketPlaceReaderContract
  extends Truffle.Contract<MarketPlaceReaderInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MarketPlaceReaderInstance>;
}

type AllEvents = never;

export interface MarketPlaceReaderInstance extends Truffle.ContractInstance {
  getBidderTokenBid(
    marketplace: string,
    tokenId: number | BN | string,
    bidder: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    tokenId: BN;
    bidPrice: BN;
    bidder: string;
    expireTimestamp: BN;
  }>;

  getTokenBids(
    marketplace: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
  >;

  getTokenHighestBid(
    marketplace: string,
    tokenId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    tokenId: BN;
    bidPrice: BN;
    bidder: string;
    expireTimestamp: BN;
  }>;

  getTokenHighestBids(
    marketplace: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
  >;

  getAllTokenHighestBids(
    marketplace: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
  >;

  getBidderBids(
    marketplace: string,
    bidder: string,
    from: number | BN | string,
    size: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
  >;

  methods: {
    getBidderTokenBid(
      marketplace: string,
      tokenId: number | BN | string,
      bidder: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      tokenId: BN;
      bidPrice: BN;
      bidder: string;
      expireTimestamp: BN;
    }>;

    getTokenBids(
      marketplace: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
    >;

    getTokenHighestBid(
      marketplace: string,
      tokenId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      tokenId: BN;
      bidPrice: BN;
      bidder: string;
      expireTimestamp: BN;
    }>;

    getTokenHighestBids(
      marketplace: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
    >;

    getAllTokenHighestBids(
      marketplace: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
    >;

    getBidderBids(
      marketplace: string,
      bidder: string,
      from: number | BN | string,
      size: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      { tokenId: BN; bidPrice: BN; bidder: string; expireTimestamp: BN }[]
    >;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
